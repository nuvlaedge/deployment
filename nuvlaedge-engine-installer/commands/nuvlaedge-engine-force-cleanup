#!/usr/bin/env python3

import docker
import sys
import time
import inspect


func = inspect.currentframe().f_code
project_name = sys.argv[1]
working_dir = sys.argv[2]
delete_volume = int(sys.argv[3])

print(f"Args: "
      f"ProjectName={project_name}, WorkingDir={working_dir}, DeleteVolume={True if delete_volume == 1 else False}")


def _get_containers(docker_client, project=None, labels=None):
    filter_labels = []
    if labels:
        filter_labels.extend(labels)
    if project:
        filter_labels.append(f'com.docker.compose.project={project}')
    filters = {'label': filter_labels}
    return docker_client.containers.list(filters=filters, all=True)


def get_containers(docker_client, project=None, labels=[]):
    return list(set(
        _get_containers(docker_client, project, labels +
                                                ['nuvlabox.component=True',
                                                 'nuvlabox.deployment=production']) +
        _get_containers(docker_client, project, labels +
                                                ['nuvlaedge.component=True',
                                                 'nuvlaedge.deployment=production'])
    ))


try:
    dc = docker.from_env()

    labels = [f'com.docker.compose.project.working_dir={working_dir}']

    # Start by shutting down the System Manager cause it may revive others by itself
    sm = get_containers(dc, project_name,
                        labels + ['com.docker.compose.service=system-manager'])

    for container in sm:
        try:
            container.remove(force=True)
        except docker.errors.NotFound:
            # good, it has already been removed
            pass

    # Then start by the core containers
    all = get_containers(dc, project_name, labels)

    peripheral_managers = get_containers(dc, project_name,
                                         labels + ['nuvlaedge.peripheral.component=True'])

    core = list(set(all) - set(peripheral_managers))

    for core_container in core:
        try:
            core_container.remove(force=True)
        except docker.errors.NotFound:
            # good, it has already been removed
            pass

    for pm_container in peripheral_managers:
        try:
            pm_container.remove(force=True)
        except docker.errors.NotFound:
            # good, it has already been removed
            pass

    # Now the networks
    networks = dc.networks.list(filters={'label': [f'com.docker.compose.project={project_name}']})
    for net in networks:
        try:
            net.remove()
        except docker.errors.APIError as e:
            if "403" in str(e):
                # there are still containers connected to it
                print(f'Cannot delete network {net.name} because the following containers are still using it: ')
                for container, values in dc.api.inspect_network(net.id).get('Containers', {}).items():
                    # dc.api.remove_container(container, force=True)
                    print(values.get('Name', container))

                # net.remove()
        except docker.errors.NotFound:
            # good, it has already been removed
            pass

    # Now, finally the volume
    if delete_volume == 1:
        volumes = dc.volumes.list(filters={'label': [f'com.docker.compose.project={project_name}',
                                                     'nuvlabox.deployment=production',
                                                     'nuvlabox.volume=True']})
        volumes += dc.volumes.list(filters={'label': [f'com.docker.compose.project={project_name}',
                                                      'nuvlaedge.deployment=production',
                                                      'nuvlaedge.volume=True']})

        for vol in volumes:
            try:
                vol.remove(force=True)
            except docker.errors.APIError as e:
                if "409" in str(e):
                    print(f'Cannot delete volume {vol.name} because the following containers are still using it: ')
                    for container in dc.containers.list(filters={'volume': vol.name}):
                        print(container.name)
            except docker.errors.NotFound:
                # good, it has already been removed
                pass
except Exception as e:
    # making sure that only the error message is printed and not the whole exception
    sys.exit(f'Critical error in {func.co_filename}: {str(e)}')
