#!/usr/bin/env python3

import docker
import sys
import inspect

func = inspect.currentframe().f_code
project = sys.argv[1]


def _get_containers(docker_client, project=None, labels=None):
    filter_labels = []
    if labels:
        filter_labels.extend(labels)
    if project:
        filter_labels.append(f'com.docker.compose.project={project}')
    filters = {'label': filter_labels}
    return docker_client.containers.list(filters=filters, all=True)


def get_containers(docker_client, project=None):
    return list(set(
        _get_containers(docker_client, project, ['nuvlabox.component=True']) +
        _get_containers(docker_client, project, ['nuvlaedge.component=True'])))


dc = docker.from_env()

try:
    nuvlaedge_containers = get_containers(dc, project)

    full_environment = {}
    for container in nuvlaedge_containers:
        env = container.attrs.get('Config', {}).get('Env', [])
        for env_var in env:
            try:
                k,v = env_var.split('=')
            except ValueError:
                # ignore this env
                continue
            if k not in full_environment or v:
                full_environment[k] = v

    str_environment = ','.join([f'{key}={value}' for key, value in full_environment.items()])

    print(str_environment)
except Exception as e:
    # making sure that only the error message is printed and not the whole exception
    sys.exit(f'Critical error in {func.co_filename}: {str(e)}')
