#!/bin/sh

# the host / must be mounted into this container's $rootfs directory
rootfs=${rootfs:-/rootfs}
working_dir=${working_dir:-$1}
old_environment=${old_environment:-$2}
compose_files=${compose_files:-$3}
project=${project:-$4}
quiet=${quiet:-${5:-0}}
force_restart=${force_restart:-${6:-0}}
old_nb_dir=${old_nb_dir:-$7}

if [[ -z ${project} ]]
then
  nuvlaedge-engine-printer "Rollback failed! Cannot restore NuvlaEdge without a project name." 0 "ERROR" "no"
  exit 1
fi
export COMPOSE_PROJECT_NAME="${project}"

nuvlaedge-engine-printer "Initiating NuvlaEdge Engine rollback to previous version" ${quiet} "NONE" yes

cd "${working_dir}"

cp -f ${old_nb_dir}/*yml .

if [[ $? -ne 0 ]]
then
  nuvlaedge-engine-printer "Cannot access original config files at ${old_nb_dir}" 0 "ERROR" "no"
  exit 1
fi

nuvlaedge-engine-printer "Copied old config files into rollback path $(pwd): $(ls)" ${quiet} "INFO" "no"

docker_compose_args=""
for file in $(echo ${compose_files} | tr ',' ' ')
do
  if [[ -f $file ]]
  then
    docker_compose_args="${docker_compose_args} -f ${file}"
  else
    nuvlaedge-engine-printer "Cannot find config file ${file} in original installation directory ${working_dir}. Some of the old NuvlaEdge functionalities might be lost during this rollback" ${quiet} "WARNING" "no"
  fi
done

env_file="$(pwd)/.env"
nuvlaedge-engine-printer "Setting old environment for rollback, at ${env_file}" ${quiet} "INFO" "no"

env_lines=$(echo ${old_environment} | sed 's/,/\\n/g')

echo -e "${env_lines}" | grep -v "affinity:container" > ${env_file}

if [[ $? -ne 0 ]]
then
  nuvlaedge-engine-printer "Rollback failed! Unable to restore enviroment ${env_lines} in ${env_file}." 0 "ERROR" "no"
  exit 1
fi

docker_compose_command="docker compose -p ${project} ${docker_compose_args} up -d"


if [[ ${force_restart} -eq 1 ]]
then
  nuvlaedge-engine-printer "Forcing the restart of the NuvlaEdge Engine components before rolling back" ${quiet} "WARNING" "no"
  docker_compose_down_command="docker compose --ansi never --log-level ERROR -p ${project} ${docker_compose_args} down --remove-orphans"

  nuvlaedge-engine-printer "Executing 'down' command: ${docker_compose_down_command}" ${quiet} "WARNING" "no"

  if [[ ${quiet} -eq 1 ]]
  then
    out=$($docker_compose_down_command 2>&1)
  else
    out="\n$($docker_compose_down_command)"
  fi

  if [[ $? -ne 0 ]]
  then
    nuvlaedge-engine-printer "Force restart failed (trying again): ${out}" ${quiet} "WARNING" "no"
    if [[ ${quiet} -eq 1 ]]
    then
      out=$($docker_compose_down_command 2>&1)
    else
      out="\n$($docker_compose_down_command)"
    fi

    if [[ $? -ne 0 ]]
    then
      nuvlaedge-engine-printer "Unable to force restart during rollback. Continue anyway - ${out}" ${quiet} "ERROR" "no"
    fi
  fi
fi

nuvlaedge-engine-printer "Executing command: ${docker_compose_command}" ${quiet} "INFO" "no"

if [[ ${quiet} -eq 1 ]]
then
  out=$($docker_compose_command 2>&1)
else
  out=$($docker_compose_command)
fi

if [[ $? -ne 0 ]]
then
  nuvlaedge-engine-printer "Rollback failed when executing Docker Compose command ${docker_compose_command}: ${out}" 0 "ERROR" "no"
  exit 1
fi

wait=5
nuvlaedge-engine-printer "Waiting ${wait} seconds and then checking updated NuvlaEdge Engine health..." ${quiet} "INFO" "no"
sleep ${wait}

# set timeout for 60 seconds
timer=60
nuvlaedge-engine-printer "Checking NuvlaEdge Engine health (will timeout after ${timer} sec)..." ${quiet} "INFO" "no"
health=$(nuvlaedge-engine-check-health ${timer} "${project}" 2>&1)

if [[ $? -ne 0 ]]
then
  nuvlaedge-engine-printer "NuvlaEdge Engine is not healthy. Rollback (after failed update) failed with: ${health}" 0 "ERROR" "no"
  exit 1
fi

# if we got here, then update was successful
nuvlaedge-engine-printer "NuvlaEdge Engine was rolled back successfully after a failed update" 0 "" "no"
