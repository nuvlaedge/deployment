#!/usr/bin/env python3

import docker
import sys
import time
import signal
from contextlib import contextmanager


timer = int(sys.argv[1])

@contextmanager
def timeout(deadline):
    # Register a function to raise a TimeoutError on the signal.
    signal.signal(signal.SIGALRM, raise_timeout)
    # Schedule the signal to be sent after ``time``.
    signal.alarm(deadline)

    try:
        yield
    except TimeoutError:
        raise Exception(f'Exceeded the timeout of {timer} sec while waiting for NuvlaBox installation to be healthy')
    finally:
        # Unregister the signal so it won't be triggered
        # if the timeout is not reached.
        signal.signal(signal.SIGALRM, signal.SIG_IGN)


def raise_timeout(signum, frame):
    raise TimeoutError


try:
    dc = docker.from_env()

    healthcheck_finished = False
    with timeout(timer):
        while not healthcheck_finished:
            time.sleep(3)
            try:
                nb_containers = dc.containers.list(filters={'label': "nuvlabox.component=True"}, all=True)
            except docker.client.APIError:
                continue

            for index, container in enumerate(nb_containers):
                # this loop breaks everytime it finds something unhealthy with the NB Engine, thus never terminating
                # the parent infinite loop
                state = container.attrs.get('State')
                if not state:
                    break

                if container.labels.get('com.docker.compose.service') and \
                        container.labels.get('com.docker.compose.service') == "agent":
                    if container.attrs.get('RestartCount', 0) > 0:
                        raise Exception(f'NuvlaBox Agent is unstable and/or misbehaving')
                    elif container.status != "running":
                        break
                    else:
                        pass
                elif 'Health' not in state:
                    if (index + 1) < len(nb_containers):
                        continue
                    else:
                        pass
                else:
                    health = state['Health']
                    if health.get('Status', '').lower() != "healthy":
                        break

                if (index + 1) == len(nb_containers):
                    # if we got here, we are on the last container, and we haven't "break", so it means that:
                    # - agent is running
                    # - all NB containers with a Docker healthcheck are healthy
                    healthcheck_finished = True
except Exception as e:
    # making sure that only the error message is printed and not the whole exception
    raise
