name: "NuvlaBox Remote Certification Test"

on:
  push:
    branches:
      - cicd
  # workflow_run:
  #   workflows: ["NuvlaBox Installer Build"]
  #   branches: [master]
  #   types:
  #     - completed

env:
  NUVLA_DEV_APIKEY: ${{ secrets.NUVLA_DEV_APIKEY }}
  NUVLA_DEV_APISECRET: ${{ secrets.NUVLA_DEV_APISECRET }}
  SLACK_NBE_WEBHOOK: ${{ secrets.SLACK_NBE_CICD_WEBHOOK }}
  SNYK_SIXSQCI_API_TOKEN: ${{ secrets.SNYK_SIXSQCI_API_TOKEN }}

defaults:
  run:
    shell: bash
    working-directory: test

jobs:
  tester:
    name: "Run NuvlaBox Functional Tests"
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
        python-version: [3.8]

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup dependencies
        run: |
          python --version
          pip --version
          sudo npm install -g snyk
          snyk version
          sudo apt-get install -y python3-pytest
          pip install -r requirements.txt
          docker swarm init

      - name: Preflight Checks
        run: |
          python -m pytest -vv -x --html=nuvlabox.pre-flight-check.output.html --self-contained-html pre-flight-check.py --slack_hook=${SLACK_NBE_WEBHOOK} --slack_report_link="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"

      - name: Test vulnerabilities
        if: ${{ success() }}
        id: ImageScan
        run: |
          python -m pytest -vv -x --html=nuvlabox.vulnerabilities-scan.output.html --self-contained-html vulnerability-scan.py --slack_hook=${SLACK_NBE_WEBHOOK} --slack_report_link="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"

      - name: Create Test NuvlaBox in Nuvla.io
        if: ${{ success() }}
        id: NewNuvlaBox
        uses: nuvla/nuvla-create-nuvlabox-action@v2
        with:
          api-key: ${{ secrets.NUVLA_DEV_APIKEY }}
          api-secret: ${{ secrets.NUVLA_DEV_APISECRET }}
          name: "(CI/CD) Test NuvlaBox"
          description: NuvlaBox for functional testing - commit ${{ github.sha }}, on branch ${{ github.ref }}, by ${{ github.actor }}

      - name: Deploy NuvlaBox Engine in CI/CD Testbed
        if: ${{ success() }}
        id: DeployNuvlaBoxEngine
        uses: nuvla/nuvla-deploy-app-action@v1
        with:
          api-key: ${{ secrets.NUVLA_DEV_APIKEY }}
          api-secret: ${{ secrets.NUVLA_DEV_APISECRET }}
          module-id: module/e4dcd975-2717-4051-8ade-80f6ed4bcfb1
          credential-id: ${{ secrets.RPI_CICD_TESTBED_CREDENTIAL }}
          environment: "NUVLABOX_UUID=${{ steps.NewNuvlaBox.outputs.NUVLABOX_UUID }}"

      - name: Check commissioning
        if: ${{ success() }}
        env:
          NUVLABOX_ID: ${{ steps.NewNuvlaBox.outputs.NUVLABOX_UUID }}
        run: |
          python -m pytest -vv -x --html=nuvlabox.commission-check.output.html --self-contained-html commission-check.py --slack_hook=${SLACK_NBE_WEBHOOK} --slack_report_link="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"

      - name: Test Installation Success
        if: ${{ success() }}
        id: TestInstallationSuccess
        env:
          NUVLABOX_ID: ${{ steps.NewNuvlaBox.outputs.NUVLABOX_UUID }}
        run: |
          python -m pytest -vv -x --html=nuvlabox.test-successful-installation.output.html --self-contained-html test-successful-installation.py --slack_hook=${SLACK_NBE_WEBHOOK} --slack_report_link="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"

      - name: Test Peripheral Registration
        if: ${{ success() }}
        env:
          NUVLABOX_ID: ${{ steps.NewNuvlaBox.outputs.NUVLABOX_UUID }}
          NUVLABOX_SERVICES: ${{ steps.ImageScan.outputs.services }}
        run: |
          python -m pytest -vv -x --html=nuvlabox.test-peripherals.output.html --self-contained-html test-peripherals.py --slack_hook=${SLACK_NBE_WEBHOOK} --slack_report_link="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"

      - name: Test App Deployment
        if: ${{ success() }}
        id: DeployTestApp
        uses: nuvla/nuvla-deploy-app-action@v1
        with:
          api-key: ${{ secrets.NUVLA_DEV_APIKEY }}
          api-secret: ${{ secrets.NUVLA_DEV_APISECRET }}
          module-id: module/179ee861-b378-4f74-aebf-41363df7b0d9
          credential-id: ${{ steps.TestInstallationSuccess.outputs.nuvlabox_credential_id }}

      - if: always()
        name: Cleanup Nuvla resources
        env:
          NUVLABOX_IDS: ${{ steps.NewNuvlaBox.outputs.NUVLABOX_UUID }}
          DEPLOYMENT_IDS: ${{ steps.DeployTestApp.outputs.DEPLOYMENT_ID }},${{ steps.DeployNuvlaBoxEngine.outputs.DEPLOYMENT_ID }}
        run: python cleanup.py

      - if: always()
        name: Keep test results
        uses: actions/upload-artifact@v2
        with:
          name: pytest-report
          path: test/nuvlabox.*.output.html



  notify:
    if: always()
    name: Post Workflow Status To Slack
    needs: tester
    runs-on: ubuntu-latest
    steps:
      - name: Slack Workflow Notification
        uses: Gamesight/slack-workflow-status@master
        with:
          # Required Input
          repo_token: ${{secrets.GITHUB_TOKEN}}
          slack_webhook_url: ${{secrets.SLACK_WEBHOOK_URL}}
          include_jobs: true
