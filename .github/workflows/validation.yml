name: 'NuvlaEdge Validation'

on:
  workflow_dispatch:
    inputs:

      log_level:
        description: 'Logging Level'
        required: false
        type: choice
        default: 'INFO'
        options:
          - 'DEBUG'
          - 'INFO'
          - 'WARNING'
          - 'ERROR'

      nuvlaedge_branch:
        description: 'NuvlaEdge Repository branch to test against'
        required: false
        type: string

      nuvlaedge_version:
        description: 'NuvlaEdge Tag'
        required: false
        type: string

      retrieve_logs:
        # Logs are retrieved whenever there is an error on the validation
        description: 'Retrieve docker execution logs'
        required: false
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

env:
  VALIDATION_PACKAGE_NAME: "validation-latest-py3-none-any.whl"
  BRANCH_NAME: ${{ github.head_ref || github.ref_name || vars.GITHUB_REF_NAME }}

jobs:
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      boards: ${{ steps.set-boards.outputs.boards }}
      tests: ${{ steps.set-tests.outputs.tests }}
      latest_validation: ${{ steps.get_latest_release.outputs.latest_release_tag }}
    steps:
      - id: set-boards
        run: |
          echo "boards=${{ vars.TESTBED_BOARDS }}" >> $GITHUB_OUTPUT

      - id: set-tests
        run: |
          echo "tests=${{ vars.VALIDATION_TESTS }}" >> $GITHUB_OUTPUT

      - name: Get latest release tag
        id: get_latest_release
        uses: actions/github-script@v6
        with:
          script: |
            
            const latestRelease = await github.rest.repos.getLatestRelease({
              owner: 'nuvlaedge',
              repo: 'validation',
            });
            core.setOutput('latest_release_tag', latestRelease.data.tag_name);

  run-validation:
    needs: setup-matrix
    strategy:
      matrix:
        board-config: ${{ fromJSON(needs.setup-matrix.outputs.boards) }}
        validation-type: ${{ fromJSON(needs.setup-matrix.outputs.tests) }}
      fail-fast: false
    runs-on: ${{ matrix.board-config }}
    env:
      VALIDATION_IMAGE_NAME: "nuvladev/nuvlaedge-validation:${{ needs.setup-matrix.outputs.latest_validation }}"
      BRANCH_NAME: ${{ github.head_ref || github.ref_name || vars.GITHUB_REF_NAME }}

    steps:
      - name: Image cleanup
        run: |
          for i in {1..5}; do
            docker image prune -f && break || sleep 3
          done

      - name: Pull Validation Image
        run: docker pull $VALIDATION_IMAGE_NAME

      - name: Reset results directory
        run: sudo rm -rf /home/runner/actions-runner/results/temp && sudo mkdir -p /home/runner/actions-runner/results/temp

      - name: Run Validation
        run: >
          docker run 
          --rm 
          -v /home/sixsq/.validation_keys:/root/.ssh
          -v runner_${{ matrix.board-config }}-vol:/results 
          -v ./logs/:/tmp/nuvlaedge_validator/logs
          ${{ env.VALIDATION_IMAGE_NAME }} 
          --target ${{ matrix.board-config }}.toml
          --key ${{ secrets.VALIDATION_NUVLA_API_KEY }}
          --secret ${{ secrets.VALIDATION_NUVLA_API_SECRET }}
          --validator ${{ matrix.validation-type }}
          --retrieve_logs ${{ github.event.inputs.retrieve_logs }}
          --nuvlaedge_branch ${{ github.event.inputs.nuvlaedge_branch || 'None' }}
          --nuvlaedge_version ${{ github.event.inputs.nuvlaedge_version || 'latest' }} 
          --deployment_branch ${{ env.BRANCH_NAME }}
          --log_level ${{ github.event.inputs.log_level || 'INFO' }}

      - name: Save logs as artifacts if requested or failed
        if: ${{ steps.validate.outcome }} != 'success'
        uses: actions/upload-artifact@v4
        with:
          name: 'nuvlaedge_logs_${{ matrix.board-config }}-${{ matrix.validation-type }}'
          path: /tmp/nuvlaedge_validator/

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action/linux@v2
        if: always()
        with:
          check_name: "| ${{ matrix.board-config }} --- ${{ matrix.validation-type }} |"
          junit_files: "/home/runner/actions-runner/results/temp/xml/*.xml"
