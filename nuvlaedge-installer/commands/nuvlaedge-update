#!/bin/sh

compose_files=${compose_files:-$1}
target_version=${target_version:-$2}
quiet=${quiet:-${3:-0}}
on_update_failure=${on_update_failure:-$4}
environment=${environment:-$5}
project=${project:-$6}
github_releases=${github_releases:-${7:-"https://github.com/nuvlaedge/deployment/releases"}}
force_restart=${force_restart:-${8:-0}}
working_dir=${working_dir:-$9}
current_version=${current_version:-${10}}
hard_reset=${hard_reset:-0}

echo ""
nuvlaedge-printer "Updating NuvlaEdge Engine to version ${target_version}" ${quiet} "" yes

if [[ -z ${project} ]]
then
  nuvlaedge-printer "Update failed! Cannot update without a project name." 0 "ERROR" "no"
  exit 1
fi
export COMPOSE_PROJECT_NAME="${project}"

if [[ ! -z "${environment}" ]]
then
  env_file="${working_dir}/.env"
  nuvlaedge-printer "Setting environment for update, at ${env_file}" ${quiet} "INFO" "no"

  env_lines=$(echo ${environment} | sed 's/,/\\n/g')
  #nuvlaedge-printer "New environment variables:\n${env_lines}" ${quiet} "DEBUG" "no"

  echo -e "${env_lines}" | grep -v "affinity:container" > ${env_file}

  if [[ $? -ne 0 ]]
  then
    nuvlaedge-printer "Update failed! Unable to store environment ${env_lines} in ${env_file}." 0 "ERROR" "no"
    exit 1
  fi
fi

# First, try downloading config files from Nuvla
nuvlaedge-printer "Downloading compose files ${compose_files} from Nuvla for version ${target_version}" ${quiet} "INFO" "no"
download=$(nuvlaedge-download-nuvla-configs "${compose_files}" "${working_dir}" "${target_version}" 2>&1)

# If fails, try Github release assets
if [[ $? -ne 0 ]]
then
  nuvlaedge-printer "Failed downloading compose files from Nuvla: ${download}" 0 "WARNING" "no"
  source_code_url="${github_releases}/download/${target_version}"

  nuvlaedge-printer "Downloading compose files ${compose_files} from ${source_code_url}" ${quiet} "INFO" "no"

  download=$(nuvlaedge-download-configs "${compose_files}" "${working_dir}" "${source_code_url}" 2>&1)

  if [[ $? -ne 0 ]]
  then
    nuvlaedge-printer "Update failed! Unable to retrieve compose files ${compose_files}: ${download}" 0 "ERROR" "no"
    exit 1
  fi
fi

nuvlaedge-printer "Preparing to update NuvlaEdge Engine running as project ${project}" ${quiet} "" "yes"

docker_compose_args=$(echo "-f $(echo ${compose_files} | sed 's/,/ -f /g')")

if [[ ${force_restart} -eq 1 ]]
then
  # when doing a "down" it is better to use the original compose files
  if [[ ! -z ${current_version} ]]
  then
    down_dir="/tmp/down"
    mkdir -p ${down_dir}
    download=$(nuvlaedge-download-nuvla-configs "${compose_files}" "${down_dir}" "${current_version}" 2>&1)

    if [[ $? -ne 0 ]]
    then
      source_code_url_current="${github_releases}/download/${current_version}"

      nuvlaedge-printer "Downloading compose config files ${compose_files} from ${source_code_url_current} for shutdown" ${quiet} "INFO" "no"

      download=$(nuvlaedge-download-configs "${compose_files}" "${down_dir}" "${source_code_url_current}" 2>&1)
    fi

    if [[ $? -ne 0 ]]
    then
      nuvlaedge-printer "Failed to retrieve current cmpose files ${compose_files} for shutdown: ${download}" 0 "ERROR" "no"
      cd ${working_dir}
    else
      cd ${down_dir}
    fi
  fi

  docker_compose_down_command="docker --log-level ERROR compose --ansi never -p ${project} ${docker_compose_args} down --remove-orphans"

  if [[ ${hard_reset} -eq 0 ]]
  then
    nuvlaedge-printer "Forcing the restart of the NuvlaEdge Engine components before updating" ${quiet} "WARNING" "no"
    delete_volume=0
  else
    nuvlaedge-printer "Forcing the hard reset (full re-installation) of the NuvlaEdge Engine components before updating" ${quiet} "WARNING" "no"
    docker_compose_down_command="${docker_compose_down_command} -v"
    delete_volume=1
  fi

  nuvlaedge-printer "Executing 'down' command: ${docker_compose_down_command}" ${quiet} "WARNING" "no"

  if [[ ${quiet} -eq 1 ]]
  then
    out=$($docker_compose_down_command 2>&1)
  else
    out="\n$($docker_compose_down_command)"
  fi

  if [[ $? -ne 0 ]]
  then
    nuvlaedge-printer "Force restart failed (trying again): ${out}" ${quiet} "WARNING" "no"
    if [[ ${quiet} -eq 1 ]]
    then
      out=$(nuvlaedge-force-cleanup "${project}" "${working_dir}" $delete_volume 2>&1)
    else
      out="\n$(nuvlaedge-force-cleanup "${project}" "${working_dir}" $delete_volume)"
    fi

    if [[ $? -ne 0 ]]
    then
      nuvlaedge-printer "Unable to force restart during update. Continue anyway - ${out}" ${quiet} "ERROR" "no"
    fi
  fi
fi

docker_compose_command="docker --log-level ERROR compose --ansi never -p ${project} ${docker_compose_args} up --remove-orphans -d"

cd ${working_dir}

nuvlaedge-printer "Executing update command: ${docker_compose_command}" ${quiet} "INFO" "no"

docker_compose_command="env -u NUVLAEDGE_API_KEY -u NUVLAEDGE_API_SECRET ${docker_compose_command}"

if [[ ${quiet} -eq 1 ]]
then
  out=$($docker_compose_command 2>&1)
else
  out="\n$($docker_compose_command)"
fi

if [[ $? -ne 0 ]]
then
  nuvlaedge-printer "Update failed when executing Docker Compose command ${docker_compose_command}.${out}" 0 "ERROR" "no"
  exit 1
fi

wait=5
nuvlaedge-printer "Waiting ${wait} seconds and then checking updated NuvlaEdge Engine health..." ${quiet} "INFO" "no"
sleep ${wait}

# set timeout for 10 minutes
timer=600
nuvlaedge-printer "Checking NuvlaEdge Engine health (will timeout after ${timer} sec)..." ${quiet} "INFO" "no"
health=$(nuvlaedge-check-health ${timer} "${project}" 2>&1)

if [[ $? -ne 0 ]]
then
  nuvlaedge-printer "Updated NuvlaEdge Engine is not healthy. Updated failed with: ${health}" 0 "ERROR" "no"
  exit 1
fi

# if we got here, then update was successful
nuvlaedge-printer "NuvlaEdge Engine update to version ${target_version} was successful!" 0 "" "no"
