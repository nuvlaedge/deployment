#!/usr/bin/env python3

import docker
import sys
import time
import signal
import logging
from contextlib import contextmanager

args_count = len(sys.argv)
timer = int(sys.argv[1]) if args_count > 1 else 60
project = sys.argv[2] if args_count > 2 else None
verbose = True if args_count > 3 else False

OK = True
NOK = False
RETRY = None

INTERVAL=10

initial_restart_count = {}

@contextmanager
def timeout(deadline):
    # Register a function to raise a TimeoutError on the signal.
    signal.signal(signal.SIGALRM, raise_timeout)
    # Schedule the signal to be sent after ``time``.
    signal.alarm(deadline)

    try:
        yield
    except TimeoutError:
        raise Exception(f'Exceeded the timeout of {timer} sec while waiting for NuvlaEdge installation to be healthy')
    finally:
        # Unregister the signal so it won't be triggered
        # if the timeout is not reached.
        signal.signal(signal.SIGALRM, signal.SIG_IGN)


def raise_timeout(signum, frame):
    raise TimeoutError


def any_false(iterable):
    for i in iterable:
        if i == False:
            return True
    return False


def is_agent(container):
    return container.labels.get('com.docker.compose.service', '') == 'agent'


def _get_containers(docker_client, project=None, labels=None):
    filter_labels = []
    if labels:
        filter_labels.extend(labels)
    if project:
        filter_labels.append(f'com.docker.compose.project={project}')
    filters = {'label': filter_labels}
    return docker_client.containers.list(filters=filters, all=True)


def get_containers(docker_client, project=None):
    return list(set(
        _get_containers(docker_client, project, ['nuvlabox.component=True']) +
        _get_containers(docker_client, project, ['nuvlaedge.component=True'])))


def get_container_logs(container):
    return container.logs(stream=False, tail=100, timestamps=True)


def check_container_running(container):
    status = container.status
    if not status or status.lower() != 'running':
        return RETRY, f'status not running: {status}'
    return OK, ''


def check_restart_count(container):
    global initial_restart_count

    name = container.name
    restart_count = container.attrs.get('RestartCount', 0)

    if name not in initial_restart_count:
        initial_restart_count[name] = restart_count
        return RETRY, f'initial restart count: {restart_count}'

    if restart_count > initial_restart_count[name]:
        return NOK, (f'restart count too high: {restart_count} '
                     f'(initial value: {initial_restart_count[name]})')
    return OK, ''


def check_health_state(container):
    state = container.attrs.get('State')
    if not state:
        return RETRY, 'state not available'

    health = state.get('Health')
    if not health:
        return OK, 'health not available (not an issue)'

    status = health.get('Status')
    if not status or status.lower() != 'healthy':
        return RETRY, f'status not healthy: {status}'

    return OK, ''


def exec_check(command, container, results, messages, logs):
    res, msg = command(container)
    results.append(res)
    if msg:
        message = f'Container "{container.name}" {msg}'
        messages.append(message)
        logging.info(message)
    if not res:
        logs[container.name] = get_container_logs(container)


if verbose:
    logging.basicConfig(level=logging.INFO)

last_messages = []
last_logs = {}

try:
    docker_client = docker.from_env()

    with timeout(timer):
        while True:
            logs = {}
            results = []
            messages = []

            try:
                containers = get_containers(docker_client, project)
            except docker.errors.APIError:
                continue

            if not containers:
                raise Exception('NuvlaEdge not healthy: no containers found')

            for container in containers:
                local_results = []
                args = (container, local_results, messages, logs)
                if is_agent(container):
                    exec_check(check_restart_count, *args)
                    exec_check(check_container_running, *args)
                exec_check(check_health_state, *args)

                result = None
                if any_false(local_results):
                    result = False
                elif local_results and all(local_results):
                    result = True
                results.append(result)

            last_messages = messages
            last_logs = logs

            if all(results):
                break
            elif any_false(results):
                raise Exception('NuvlaEdge installation not healthy')

            time.sleep(INTERVAL)

except Exception as e:
    messages = "\n".join(last_messages)
    print(f'{e}')
    print(f'Messages: \n{messages}')
    print(f'Logs:')
    for container_name, logs in last_logs.items():
        print(f'{container_name}: \n{logs}')
    # making sure that only the error message is printed and not the whole exception
    # raise
    exit(1)
else:
    print('NuvlaEdge installation healthy')
