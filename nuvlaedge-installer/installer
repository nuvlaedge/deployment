#!/bin/sh

command="${1}"
on_update_failure="rollback"
on_update_failure_options="('rollback' 'ignore' 'retry')"

export save_dir=$(pwd)
export rootfs=${ROOTFS:-/rootfs}
export rootfs_working_dir=${ROOTFS_WORKING_DIR:-/rootfs-working-dir}
export quiet=0
export install_daemon_mode=0
export force_restart=1
export github_releases="https://github.com/nuvlaedge/deployment/releases"
export cluster_args=""
export hard_reset=0

set -o pipefail

usage()
{
  echo -e ""
  echo -e " -- NuvlaEdge installer -- "
  echo -e ""
  echo -e "Usage: $0 [COMMAND] [ARGS]"
  echo -e ""
  echo -e " -h --help\t\t\t\tShow this help information"
  echo -e ""
  echo -e "COMMANDS:"
  echo -e " install\t\t\t\tInstall NuvlaEdge"
  echo -e " update\t\t\t\t\tUpdate an existing NuvlaEdge installation"
  echo -e " uninstall\t\t\t\tShutdown (and optionally delete) an existing NuvlaEdge installation"
  echo -e " cluster\t\t\t\tJoin/Leave the NuvlaEdge device to/from a cluster"
  echo -e ""
  echo -e "INSTALL args:"
  echo -e " --compose-files=<list>\t\t\t(optional) Comma-separated list of compose files to deploy. If not passed, it uses all"
  echo -e " --environment=<list>\t\t\t(optional) Comma-separated list of ENV=VALUE keypairs"
  echo -e " --target-version=<string>\t\t(optional) NuvlaEdge release to be installed. If not passed, it uses the main branch"
  echo -e " --project=<string>\t\t\t(optional) Project name used during the first installation. Default is 'nuvlaedge'"
  echo -e " --quiet\t\t\t\t(optional) Only print final status message"
  echo -e " --daemon\t\t\t\t(optional) If set, it will install the NuvlaEdge and exit the installer"
  echo -e ""
  echo -e "UDPATE args:"
  echo -e " --compose-files=<list>\t\t\tComma-separated list of compose files to deploy"
  echo -e " --current-environment=<list>\t\t(optional) Comma-separated list of current ENV=VALUE keypairs, in case a rollback is needed"
  echo -e " --no-restart\t\t\t\t(optional) If passed, it will not restart the whole NuvlaEdge during the update"
  echo -e " --new-environment=<list>\t\t(optional) Comma-separated list of new ENV=VALUE keypairs"
  echo -e " --on-update-failure=<string>\t\tAction be take in case the update fails ${on_update_failure_options}. Default: ${on_update_failure}"
  echo -e " --project=<string>\t\t\tProject name used during the first installation"
  echo -e " --quiet\t\t\t\t(optional) Only print final status message"
  echo -e " --current-version=<string>\t\t(optional) NuvlaEdge version currently installed. Must match a release from ${github_releases}"
  echo -e " --target-version=<string>\t\tNuvlaEdge version to be installed. Must match a release from ${github_releases}"
  echo -e " --working-dir=<string>\t\t\tDirectory, on the host, from where NuvlaEdge was installed the first time, and where the corresponding config files can be found"
  echo -e ""
  echo -e "UNINSTALL args:"
  echo -e " --project=<string>\t\t\t(optional) Project name used during the first installation. Default is 'nuvlaedge'"
  echo -e " --quiet\t\t\t\t(optional) Only print final status message"
  echo -e ""
  echo -e "CLUSTER args:"
  echo -e " --join-worker=<string>\t\t\tToken used to join this device as a worker. Takes precedence over --token-manager"
  echo -e " --join-manager=<string>\t\tToken used to join this device as a manager"
  echo -e " --join-address=<string>\t\tAdvertised manager address to join to"
  echo -e " --leave\t\t\t\tLeave the cluster. Precedes all join- options"
  echo -e " --force-new-cluster\t\t\tLeave the cluster and force the creation of a new one, where it shall become manager"
  echo -e " --advertise-addr\t\t\tNew cluster advertise addresss"
  echo -e " --quiet\t\t\t\t(optional) Only print final status message"
}

banner_intro()
{
  nuvlaedge-printer '' ${1}
  nuvlaedge-printer '  _   _             _        ______    _             ' ${1}
  nuvlaedge-printer ' | \ | |           | |      |  ____|  | |            ' ${1}
  nuvlaedge-printer ' |  \| |_   ___   _| | __ _ | |__   __| | __ _  ___  ' ${1}
  nuvlaedge-printer ' | . ` | | | \ \ / / |/ _` ||  __| / _` |/ _` |/ _ \ ' ${1}
  nuvlaedge-printer ' | |\  | |_| |\ V /| | (_| || |___| (_| | (_| |  __/ ' ${1}
  nuvlaedge-printer ' |_| \_|\__,_| \_/ |_|\__,_||______\__,_|\__, |\___| ' ${1}
  nuvlaedge-printer '                                          __/ |      ' ${1}
  nuvlaedge-printer '                                         |___/       ' ${1}
  nuvlaedge-printer '' ${1}
}

check_args_install()
{
  if [[ -z $compose_files ]]
  then
    export compose_files=$(echo $(ls docker-compose.*) | tr ' ' ',')
    nuvlaedge-printer "Installing NuvlaEdge with all compose files: ${compose_files}" ${quiet} "INFO" "no"
  fi
}

reset_host_environment(){
  # since this installer runs inside a container, the reserved HOST env variables are replaced by the container
  # The NB needs the HOST env, not the container's
  # so let's try to replicate the necessary HOST environment, inside this container

  # env setup for setting HOME folder (for mgmt-api)
  home_set=0
  for env_var in $(echo ${environment} | tr ',' ' ')
  do
    if [[ $(echo ${env_var} | grep "HOST_HOME=") ]]
    then
      export HOST_HOME=$(echo ${env_var} | cut -d= -f 2)
      export HOME=$HOST_HOME
      home_set=1
    fi

    if [[ $(echo ${env_var} | grep "HOST_USER=") ]]
    then
      export USER=$(echo ${env_var} | cut -d= -f 2)
    fi

    if [[ $(echo ${env_var} | grep "HOST=") ]]
    then
      export HOSTNAME=$(echo ${env_var} | cut -d= -f 2)
    fi
  done

  # If HOME isn't yet defined, we need to reverse engineer it (this is needed for the legacy mgmt-api)
  if [[ $home_set -eq 0 ]]
  then
    infer_home=$(nuvlaedge-get-host-home)
    if [[ ! -z $infer_home ]]
    then
      export HOME=$infer_home
    fi
  fi
}

check_args_cluster()
{
  if [[ ! -z $cluster_force_new ]]
  then
    if [[ ! -z $advertise_addr ]]
    then
      extra="--advertise-addr ${advertise_addr}"
    fi
    export cluster_args="${cluster_args} --force-new-cluster ${extra}"
    continue
  else
    if [[ ! -z $cluster_leave ]]
    then
      # nothing to do
      export cluster_args="${cluster_args} --leave"
      continue
    else
      if [[ -z $join_address ]]
      then
        echo -e "cluster ERROR: need join address to be able to join a cluster"
        usage
        exit 1
      else
        export cluster_args="${cluster_args} --join-address ${join_address}"
        if [[ ! -z $join_worker ]]
        then
          export cluster_args="${cluster_args} --join-worker ${join_worker}"
        elif [[ ! -z $join_manager ]]
        then
          export cluster_args="${cluster_args} --join-worker ${join_manager}"
        else
          echo -e "cluster ERROR: need to have either a worker or manager token to be able to join the cluster"
          usage
          exit 1
        fi
      fi
    fi
  fi
}

check_args_update()
{
  if [[ -z $compose_files ]] || [[ -z $target_version ]] || [[ -z $quiet ]] || [[ -z $on_update_failure ]] || \
      [[ -z $project ]] || [[ -z "$working_dir" ]]
  then
    echo -e "update ERROR: missing mandatory args"
    usage
    exit 1
  fi

  mkdir -p ${working_dir} || (echo -e "update ERROR: cannot reproduce installation dir at ${working_dir}" && exit 1)

  if [[ -z "$old_environment" ]]
  then
    export old_environment=$(nuvlaedge-current-env ${project} 2>&1)
    if [[ $? -ne 0 ]]
    then
      echo -e "update ERROR: cannot infer --current-environment. Unable to continue"
      exit 1
    fi
  fi

  if [[ -z "$current_version" ]]
  then
    for old_env_var in $(echo ${old_environment} | tr ',' ' ')
    do
      if [[ $(echo ${old_env_var} | grep "NUVLAEDGE_ENGINE_VERSION=") ]]
      then
        export current_version=$(echo ${old_env_var} | cut -d= -f 2)
        break
      fi
    done
  fi

  if [[ -z "$environment" ]]
  then
    # assume no changes to the new env
    export environment="${old_environment}"
  fi

  # cleanup list of compose files to avoid duplicates and full paths
  export compose_files=$(python -c 'import os;print(",".join(set([c.split("/")[-1] for c in os.getenv("compose_files").split(",")])))')

  reset_host_environment
}

ensure_uninstall_on_exit() {
    nuvlaedge-async-uninstall "${project}"
}

case ${command} in
  -h | --help)
    usage
    exit
    ;;
  update)
    #------------------------------------------------------------------------#
    # UPDATE
    #------------------------------------------------------------------------#
    shift
    while [ "$1" != "" ]; do
      PARAM=`echo -e $1 | awk -F= '{print $1}'`
      VALUE=`echo -e $1 | cut -d "=" -f 2-`
      case $PARAM in
        -h | --help)
          usage
          exit
          ;;
        --compose-files)
          export compose_files=${VALUE}
          ;;
        --current-version)
          export current_version=${VALUE}
          ;;
        --target-version)
          export target_version=${VALUE}
          ;;
        --quiet)
          export quiet=1
          ;;
        --no-restart)
          export force_restart=0
          ;;
        --on-update-failure)
          case $VALUE in
            retry|ignore|rollback)
              export on_update_failure=${VALUE}
              ;;
            *)
              echo -e "${command} ERROR: unsupported value for ${PARAM}. Must be one of ${on_update_failure_options}. Got: ${VALUE}"
              exit 1
              ;;
          esac
          ;;
        --new-environment)
          case "${VALUE}" in
            "'"*) eval environment="${VALUE}" && export environment;;
            *) export environment=${VALUE};;
          esac
          ;;
        --current-environment)
          case "${VALUE}" in
            "'"*) eval old_environment="${VALUE}" && export old_environment;;
            *) export old_environment=${VALUE};;
          esac
          ;;
        --project)
          export project=${VALUE}
          ;;
        --working-dir)
          export working_dir=${VALUE}
          ;;
        *)
          echo -e "${command} ERROR: unknown option $PARAM"
          usage
          exit 1
          ;;
      esac
      shift
    done
    check_args_update
    #banner_intro ${quiet}
    # Save previous docker-compose files in .version folder. Each version will have its own folder
    output=$(nuvlaedge-update 2>&1 | tee /dev/fd/2)

    if [[ $? -ne 0 ]]
    then
      # update failed, so check the fail policy
      case $on_update_failure in
        rollback)
          nuvlaedge-printer "NuvlaEdge update failed. Rollback to previous version" 0 "WARNING" "no"
          nuvlaedge-printer "ROLLBACK" ${quiet} "" "yes"
          export target_version=${current_version}
          output=$(nuvlaeedge-update 2>&1 | tee /dev/fd/2)
          if [[ $? -ne 0 ]]
          then
            if [[ ! -z "${NUVLAEDGE_API_KEY}" ]] && [[ ! -z "${NUVLAEDGE_API_SECRET}" ]]
            then
              case "${target_version}" in
                "2."*) nuvlaedge-printer "NuvlaEdge rollback was unsuccessful. Forcing recovery and update through full re-installation" 0 "WARNING" "no"
                      export hard_reset=1
                      output=$(nuvlaedge-update 2>&1 | tee /dev/fd/2)
                      if [[ $? -ne 0 ]]
                      then
                        exit 1
                      else
                        nuvlaedge-printer "NuvlaEdge update finally succeeded after a full re-installation!" ${quiet} "INFO" "no"
                        exit 0
                      fi;;
                *) exit 1;;
              esac
            else
              exit 1
            fi
          fi
          # rollback successful
          nuvlaedge-printer "NuvlaEdge update failed. But was able to rollback to previous version" ${quiet} "WARNING" "no"
          exit 0
          ;;
        retry)
          nuvlaedge-printer "NuvlaEdge update failed once. Trying a second time..." ${quiet} "WARNING" "no"
          nuvlaedge-printer "RETRY" ${quiet} "" "yes"
          output=$(nuvlaedge-update 2>&1 | tee /dev/fd/2)
          if [[ $? -ne 0 ]]
          then
            exit 1
          else
            # succeeded the second time
            nuvlaedge-printer "NuvlaEdge update finally succeeded on retry!" ${quiet} "INFO" "no"
            exit 0
          fi
          ;;
        ignore)
          # nothing to do. Just printout final message and exit with error
          exit 1
          ;;
      esac
    else
      # update successful
      # Save original files to .original folder
      # Replace original files from the updated version

      exit 0
    fi
    ;;
  uninstall)
    #------------------------------------------------------------------------#
    # UNINSTALL
    #------------------------------------------------------------------------#
    shift
    while [ "$1" != "" ]; do
      PARAM=`echo -e $1 | awk -F= '{print $1}'`
      VALUE=`echo -e $1 | cut -d "=" -f 2-`
      case $PARAM in
        -h | --help)
          usage
          exit
          ;;
        --project)
          export project=${VALUE}
          ;;
        *)
          echo -e "${command} ERROR: unknown option $PARAM"
          usage
          exit 1
          ;;
      esac
      shift
    done
    #banner_intro ${quiet}
    # in case it has been pass via the environment, it can be used by the uninstaller
    export working_dir
    output=$(nuvlaedge-uninstall 2>&1 | tee /dev/fd/2)

    if [[ $? -ne 0 ]]
    then
      # uninstall failed
      nuvlaedge-printer "NuvlaEdge uninstall failed" ${quiet} "ERROR" "no"
      exit 1
    else
      # uninstall successful
      # print final message and finish
      exit 0
    fi
    ;;
  cluster)
    #------------------------------------------------------------------------#
    # CLUSTER
    #------------------------------------------------------------------------#
    shift
    while [ "$1" != "" ]; do
      PARAM=`echo -e $1 | awk -F= '{print $1}'`
      VALUE=`echo -e $1 | cut -d "=" -f 2-`
      case $PARAM in
        -h | --help)
          usage
          exit
          ;;
        --join-worker)
          export join_worker=${VALUE}
          ;;
        --join-manager)
          export join_manager=${VALUE}
          ;;
        --join-address)
          export join_address=${VALUE}
          ;;
        --leave)
          export cluster_leave=1
          ;;
        --force-new-cluster)
          export cluster_force_new=1
          ;;
        --advertise-addr)
          export advertise_addr=${VALUE}
          ;;
        --quiet)
          export quiet=1
          ;;
        *)
          echo -e "${command} ERROR: unknown option $PARAM"
          usage
          exit 1
          ;;
      esac
      shift
    done
    #banner_intro ${quiet}
    check_args_cluster
    output=$(nuvlaedge-cluster ${cluster_args} 2>&1 | tee /dev/fd/2)

    if [[ $? -ne 0 ]]
    then
      # uninstall failed
      nuvlaedge-printer "Clustering operation failed" ${quiet} "ERROR" "no"
      exit 1
    else
      # uninstall successful
      # print final message and finish
      exit 0
    fi
    ;;
  install)
    #------------------------------------------------------------------------#
    # INSTALL
    #------------------------------------------------------------------------#
    shift
    while [ "$1" != "" ]; do
      PARAM=`echo -e $1 | awk -F= '{print $1}'`
      VALUE=`echo -e $1 | cut -d "=" -f 2-`
      case $PARAM in
        -h | --help)
          usage
          exit
          ;;
        --compose-files)
          export compose_files=${VALUE}
          ;;
        --environment)
          case "${VALUE}" in
            "'"*) eval environment="${VALUE}" && export environment;;
            *) export environment=${VALUE};;
          esac
          ;;
        --quiet)
          export quiet=1
          ;;
        --project)
          export project=${VALUE}
          ;;
        --target-version)
          export target_version=${VALUE}
          ;;
        --daemon)
          export install_daemon_mode=1
          ;;
        *)
          echo -e "${command} ERROR: unknown option $PARAM"
          usage
          exit 1
          ;;
      esac
      shift
    done
    banner_intro ${quiet}
    check_args_install
    reset_host_environment
    if [[ $install_daemon_mode -eq 0 ]]
    then
      trap ensure_uninstall_on_exit SIGINT SIGTERM
    fi
    output=$(nuvlaedge-install 2>&1 | tee /dev/fd/2)

    if [[ $? -ne 0 ]]
    then
      # install failed
      nuvlaedge-printer "NuvlaEdge install failed" ${quiet} "ERROR" "no"
      exit 1
    else
      # install successful
      if [[ $install_daemon_mode -eq 0 ]]
      then
        nuvlaedge-printer "Waiting in foreground...stop me to shutdown NuvlaEdge" 0 "INFO" "no"
        sleep inf &
        wait $!
      else
        # print final message and finish
        exit 0
      fi
    fi
    ;;
  *)
    echo -e "ERROR: unknown command ${command}"
    usage
    exit 1
    ;;
esac
